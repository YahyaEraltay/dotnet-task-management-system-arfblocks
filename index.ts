/*
!!! ATTENTION !!!
THIS FILE HAS BEEN AUTO-GENERATED
DO NOT EDIT THIS FILE
*/

// Imports 
import { AppConfig, api as axios } from 'todo-task-config'; 
import { ApiService } from '../services';

// Custom Types 
type Guid = string; 
type Double = number;

// Settings...

export namespace API {

	export namespace Enums {

		export enum XSortingDirection {
			Ascending = 0,
			Descending = 1,
		}

		export enum TodoTaskStatus {
			Pending = 0,
			Completed = 1,
			Rejected = 2,
		}

	}

	export namespace Users {

		export namespace Me {
			export const RequestPath = '/Users/Me';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
			}
			export interface IResponseModel {
				id: Guid;
				email: string;
				displayName: string;
				departmentId: Guid;
				departmentName: string;
			}
		}

		export namespace Detail {
			export const RequestPath = '/Users/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				email: string;
				firstName: string;
				lastName: string;
				departmentId: Guid;
				departmentName: string;
			}
		}

		export namespace All {
			export const RequestPath = '/Users/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				email: string;
				firstName: string;
				lastName: string;
				displayName: string;
				departmentId: Guid;
				departmentName: string;
			}
		}

		export namespace Update {
			export const RequestPath = '/Users/Update';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
				email: string;
				firstName: string;
				lastName: string;
				departmentId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				email: string;
				firstName: string;
				lastName: string;
				departmentId: Guid;
			}
		}

		export namespace Login {
			export const RequestPath = '/Users/Login';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				email: string;
			}
			export interface IResponseModel {
				jwtToken: string;
				userId: Guid;
				email: string;
				displayName: string;
				department: IDepartmentResponseModel;
			}
			export interface IDepartmentResponseModel {
				id: Guid;
				name: string;
			}
		}

		export namespace Delete {
			export const RequestPath = '/Users/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
				isDeleted: boolean;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

		export namespace Create {
			export const RequestPath = '/Users/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				email: string;
				firstName: string;
				lastName: string;
				departmentId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				firstName: string;
				lastName: string;
			}
		}

	}

	export namespace TodoTasks {

		export namespace UIDC {
			export const RequestPath = '/TodoTasks/UIDC';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				commands: IUidcCommands;
			}
			export interface IUidcCommands {
				edit: boolean;
				delete: boolean;
				unDelete: boolean;
				reject: boolean;
				complete: boolean;
			}
		}

		export namespace Statistics {
			export const RequestPath = '/TodoTasks/Statistics';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
			}
			export interface IResponseModel {
				waitingForMyApprovals: number;
				myCreations: number;
			}
		}

		export namespace Pendings {
			export const RequestPath = '/TodoTasks/Pendings';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
				description: string;
				status: Enums.TodoTaskStatus;
				assignedDepartment: IAssignedDepartmentResponseModel;
				createdBy: IUserResponseModel;
			}
			export interface IAssignedDepartmentResponseModel {
				id: Guid;
				name: string;
			}
			export interface IUserResponseModel {
				id: Guid;
				displayName: string;
			}
		}

		export namespace MyTasks {
			export const RequestPath = '/TodoTasks/MyTasks';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
				description: string;
				status: Enums.TodoTaskStatus;
				assignedDepartment: IAssignedDepartmentResponseModel;
				createdBy: IUserResponseModel;
			}
			export interface IAssignedDepartmentResponseModel {
				id: Guid;
				name: string;
			}
			export interface IUserResponseModel {
				id: Guid;
				displayName: string;
			}
		}

		export namespace Detail {
			export const RequestPath = '/TodoTasks/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
				description: string;
				status: Enums.TodoTaskStatus;
				assignedDepartment: IAssignedDepartmentResponseModel;
				createdBy: IUserResponseModel;
			}
			export interface IAssignedDepartmentResponseModel {
				id: Guid;
				name: string;
			}
			export interface IUserResponseModel {
				id: Guid;
				displayName: string;
				departmentId: Guid;
			}
		}

		export namespace All {
			export const RequestPath = '/TodoTasks/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
				description: string;
				status: Enums.TodoTaskStatus;
				assignedDepartment: IAssignedDepartmentResponseModel;
				createdBy: IUserResponseModel;
			}
			export interface IAssignedDepartmentResponseModel {
				id: Guid;
				name: string;
			}
			export interface IUserResponseModel {
				id: Guid;
				displayName: string;
			}
		}

		export namespace Update {
			export const RequestPath = '/TodoTasks/Update';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
				title: string;
				description: string;
				assignedDepartmentId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
				description: string;
				assignedDepartmentId: Guid;
				createdById: Guid;
				status: Enums.TodoTaskStatus;
			}
		}

		export namespace Reject {
			export const RequestPath = '/TodoTasks/Reject';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
				actionComment: string;
			}
			export interface IResponseModel {
				id: Guid;
				status: Enums.TodoTaskStatus;
			}
		}

		export namespace Delete {
			export const RequestPath = '/TodoTasks/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
				isDeleted: boolean;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

		export namespace Create {
			export const RequestPath = '/TodoTasks/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				title: string;
				description: string;
				assignedDepartmentId: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				title: string;
				description: string;
				assignedDepartmentId: Guid;
				createdById: Guid;
				status: Enums.TodoTaskStatus;
			}
		}

		export namespace Complete {
			export const RequestPath = '/TodoTasks/Complete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
				actionComment: string;
			}
			export interface IResponseModel {
				id: Guid;
				status: Enums.TodoTaskStatus;
			}
		}

	}

	export namespace Departments {

		export namespace Detail {
			export const RequestPath = '/Departments/Detail';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
			}
		}

		export namespace All {
			export const RequestPath = '/Departments/All';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel[]>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				sorting: IXSorting;
				filters: IXFilterItem[];
				pageRequest: IXPageRequest;
			}
			export interface IXSorting {
				key: string;
				direction: Enums.XSortingDirection;
			}
			export interface IObject {
			}
			export interface IXFilterItem {
				key: string;
				type: string;
				isUsed: boolean;
				values: IObject[];
				min: IObject;
				max: IObject;
				conditionType: string;
			}
			export interface IXPageRequest {
				currentPage: number;
				perPageCount: number;
				listAll: boolean;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
			}
		}

		export namespace Update {
			export const RequestPath = '/Departments/Update';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
				name: string;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
			}
		}

		export namespace Delete {
			export const RequestPath = '/Departments/Delete';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				id: Guid;
				isDeleted: boolean;
			}
			export interface IResponseModel {
				id: Guid;
			}
		}

		export namespace Create {
			export const RequestPath = '/Departments/Create';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
				name: string;
			}
			export interface IResponseModel {
				id: Guid;
				name: string;
			}
		}

	}

	export namespace Apps {

		export namespace UISC {
			export const RequestPath = '/Apps/UISC';
			export const Request = (data: IRequestModel) => ApiService.call<IResponseModel>(axios.post(RequestPath,{...data}));
			export interface IRequestModel {
			}
			export interface IResponseModel {
				userId: Guid;
				uisc: IUISC;
			}
			export interface IPages {
				statistics: boolean;
				listTodoTasks: boolean;
				listMyTasks: boolean;
				listPendings: boolean;
				listDepartments: boolean;
				listUsers: boolean;
			}
			export interface IUISC {
				pages: IPages;
			}
		}

	}

}